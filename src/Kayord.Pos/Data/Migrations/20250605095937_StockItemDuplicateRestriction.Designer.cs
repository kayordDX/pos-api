// <auto-generated />
using System;
using Kayord.Pos.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;

#nullable disable

namespace Kayord.Pos.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250605095937_StockItemDuplicateRestriction")]
    partial class StockItemDuplicateRestriction
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Kayord.Pos.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("HouseNr")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("house_nr");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("postal_code");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("province");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("street_name");

                    b.Property<string>("Suburb")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("suburb");

                    b.HasKey("Id")
                        .HasName("pk_address");

                    b.ToTable("address", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.Adjustment", b =>
                {
                    b.Property<int>("AdjustmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("adjustment_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AdjustmentId"));

                    b.Property<int>("AdjustmentTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("adjustment_type_id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<int?>("TableBookingId")
                        .HasColumnType("integer")
                        .HasColumnName("table_booking_id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("AdjustmentId")
                        .HasName("pk_adjustment");

                    b.HasIndex("AdjustmentTypeId")
                        .HasDatabaseName("ix_adjustment_adjustment_type_id");

                    b.HasIndex("TableBookingId")
                        .HasDatabaseName("ix_adjustment_table_booking_id");

                    b.ToTable("adjustment", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.AdjustmentType", b =>
                {
                    b.Property<int>("AdjustmentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("adjustment_type_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AdjustmentTypeId"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("AdjustmentTypeId")
                        .HasName("pk_adjustment_type");

                    b.ToTable("adjustment_type", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.AdjustmentTypeOutlet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AdjustmentTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("adjustment_type_id");

                    b.Property<int>("OutletId")
                        .HasColumnType("integer")
                        .HasColumnName("outlet_id");

                    b.HasKey("Id")
                        .HasName("pk_adjustment_type_outlet");

                    b.HasIndex("AdjustmentTypeId")
                        .HasDatabaseName("ix_adjustment_type_outlet_adjustment_type_id");

                    b.HasIndex("OutletId")
                        .HasDatabaseName("ix_adjustment_type_outlet_outlet_id");

                    b.ToTable("adjustment_type_outlet", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.BulkUploadConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<int>("OutletId")
                        .HasColumnType("integer")
                        .HasColumnName("outlet_id");

                    b.HasKey("Id")
                        .HasName("pk_bulk_upload_config");

                    b.ToTable("bulk_upload_config", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.Business", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_business");

                    b.ToTable("business", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.CashUp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CashUpBalance")
                        .HasColumnType("numeric")
                        .HasColumnName("cash_up_balance");

                    b.Property<decimal>("CashUpTotal")
                        .HasColumnType("numeric")
                        .HasColumnName("cash_up_total");

                    b.Property<decimal>("CashUpTotalPayments")
                        .HasColumnType("numeric")
                        .HasColumnName("cash_up_total_payments");

                    b.Property<int>("OpenTableCount")
                        .HasColumnType("integer")
                        .HasColumnName("open_table_count");

                    b.Property<int>("SalesPeriodId")
                        .HasColumnType("integer")
                        .HasColumnName("sales_period_id");

                    b.Property<DateTime?>("SignOffDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sign_off_date");

                    b.Property<string>("SignOffUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sign_off_user_id");

                    b.Property<int>("TableCount")
                        .HasColumnType("integer")
                        .HasColumnName("table_count");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_cash_up");

                    b.HasIndex("SalesPeriodId")
                        .HasDatabaseName("ix_cash_up_sales_period_id");

                    b.ToTable("cash_up", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.CashUpConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("OutletId")
                        .HasColumnType("integer")
                        .HasColumnName("outlet_id");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_cash_up_config");

                    b.ToTable("cash_up_config", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.CashUpUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CashUpDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("cash_up_date");

                    b.Property<decimal?>("ClosingBalance")
                        .HasColumnType("numeric")
                        .HasColumnName("closing_balance");

                    b.Property<string>("CompleterUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("completer_user_id");

                    b.Property<decimal>("OpeningBalance")
                        .HasColumnType("numeric")
                        .HasColumnName("opening_balance");

                    b.Property<int>("OutletId")
                        .HasColumnType("integer")
                        .HasColumnName("outlet_id");

                    b.Property<decimal>("Payments")
                        .HasColumnType("numeric")
                        .HasColumnName("payments");

                    b.Property<decimal>("Sales")
                        .HasColumnType("numeric")
                        .HasColumnName("sales");

                    b.Property<int>("SalesPeriodId")
                        .HasColumnType("integer")
                        .HasColumnName("sales_period_id");

                    b.Property<decimal>("Tips")
                        .HasColumnType("numeric")
                        .HasColumnName("tips");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_cash_up_user");

                    b.ToTable("cash_up_user", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.CashUpUserItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CashUpUserId")
                        .HasColumnType("integer")
                        .HasColumnName("cash_up_user_id");

                    b.Property<int>("CashUpUserItemTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("cash_up_user_item_type_id");

                    b.Property<int>("OutletId")
                        .HasColumnType("integer")
                        .HasColumnName("outlet_id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_cash_up_user_item");

                    b.HasIndex("CashUpUserId")
                        .HasDatabaseName("ix_cash_up_user_item_cash_up_user_id");

                    b.HasIndex("CashUpUserItemTypeId")
                        .HasDatabaseName("ix_cash_up_user_item_cash_up_user_item_type_id");

                    b.ToTable("cash_up_user_item", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.CashUpUserItemType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AdjustmentTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("adjustment_type_id");

                    b.Property<bool>("AffectsGrossBalance")
                        .HasColumnType("boolean")
                        .HasColumnName("affects_gross_balance");

                    b.Property<int>("CashUpUserItemRule")
                        .HasColumnType("integer")
                        .HasColumnName("cash_up_user_item_rule");

                    b.Property<int?>("CashupConfigId")
                        .HasColumnType("integer")
                        .HasColumnName("cashup_config_id");

                    b.Property<bool>("IsAuto")
                        .HasColumnType("boolean")
                        .HasColumnName("is_auto");

                    b.Property<string>("ItemType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("item_type");

                    b.Property<int?>("PaymentTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("payment_type_id");

                    b.Property<int>("Position")
                        .HasColumnType("integer")
                        .HasColumnName("position");

                    b.HasKey("Id")
                        .HasName("pk_cash_up_user_item_type");

                    b.HasIndex("AdjustmentTypeId")
                        .HasDatabaseName("ix_cash_up_user_item_type_adjustment_type_id");

                    b.HasIndex("CashupConfigId")
                        .HasDatabaseName("ix_cash_up_user_item_type_cashup_config_id");

                    b.HasIndex("PaymentTypeId")
                        .HasDatabaseName("ix_cash_up_user_item_type_payment_type_id");

                    b.ToTable("cash_up_user_item_type", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.Clock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<int>("OutletId")
                        .HasColumnType("integer")
                        .HasColumnName("outlet_id");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_clock");

                    b.HasIndex("OutletId")
                        .HasDatabaseName("ix_clock_outlet_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_clock_user_id");

                    b.ToTable("clock", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.PrimitiveCollection<int[]>("Orders")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasColumnName("orders");

                    b.Property<int?>("TableId")
                        .HasColumnType("integer")
                        .HasColumnName("table_id");

                    b.HasKey("CustomerId")
                        .HasName("pk_customer");

                    b.HasIndex("TableId")
                        .HasDatabaseName("ix_customer_table_id");

                    b.ToTable("customer", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.Division", b =>
                {
                    b.Property<int>("DivisionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("division_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DivisionId"));

                    b.Property<string>("DivisionName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("division_name");

                    b.Property<int>("DivisionTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("division_type_id");

                    b.Property<string>("FriendlyName")
                        .HasColumnType("text")
                        .HasColumnName("friendly_name");

                    b.Property<int>("OutletId")
                        .HasColumnType("integer")
                        .HasColumnName("outlet_id");

                    b.HasKey("DivisionId")
                        .HasName("pk_division");

                    b.ToTable("division", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.DivisionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DivisionName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("division_name");

                    b.HasKey("Id")
                        .HasName("pk_division_type");

                    b.ToTable("division_type", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.EmailLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("IsSent")
                        .HasColumnType("boolean")
                        .HasColumnName("is_sent");

                    b.Property<string>("Message")
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<string>("Subject")
                        .HasColumnType("text")
                        .HasColumnName("subject");

                    b.HasKey("Id")
                        .HasName("pk_email_log");

                    b.ToTable("email_log", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.Extra", b =>
                {
                    b.Property<int>("ExtraId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("extra_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ExtraId"));

                    b.Property<int>("ExtraGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("extra_group_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("OutletId")
                        .HasColumnType("integer")
                        .HasColumnName("outlet_id");

                    b.Property<int>("PositionId")
                        .HasColumnType("integer")
                        .HasColumnName("position_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.HasKey("ExtraId")
                        .HasName("pk_extra");

                    b.HasIndex("ExtraGroupId")
                        .HasDatabaseName("ix_extra_extra_group_id");

                    b.ToTable("extra", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.ExtraGroup", b =>
                {
                    b.Property<int>("ExtraGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("extra_group_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ExtraGroupId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("OutletId")
                        .HasColumnType("integer")
                        .HasColumnName("outlet_id");

                    b.HasKey("ExtraGroupId")
                        .HasName("pk_extra_group");

                    b.ToTable("extra_group", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.ExtraStock", b =>
                {
                    b.Property<int>("ExtraId")
                        .HasColumnType("integer")
                        .HasColumnName("extra_id");

                    b.Property<int>("StockId")
                        .HasColumnType("integer")
                        .HasColumnName("stock_id");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric")
                        .HasColumnName("quantity");

                    b.HasKey("ExtraId", "StockId")
                        .HasName("pk_extra_stock");

                    b.HasIndex("StockId")
                        .HasDatabaseName("ix_extra_stock_stock_id");

                    b.ToTable("extra_stock", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.HaloConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_enabled");

                    b.Property<byte[]>("Iv")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("iv");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("MerchantId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("merchant_id");

                    b.Property<int>("OutletId")
                        .HasColumnType("integer")
                        .HasColumnName("outlet_id");

                    b.Property<string>("XApiKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("x_api_key");

                    b.HasKey("Id")
                        .HasName("pk_halo_config");

                    b.ToTable("halo_config", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.HaloLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Error")
                        .HasColumnType("text")
                        .HasColumnName("error");

                    b.Property<string>("Request")
                        .HasColumnType("text")
                        .HasColumnName("request");

                    b.Property<string>("RequestUrl")
                        .HasColumnType("text")
                        .HasColumnName("request_url");

                    b.Property<string>("Response")
                        .HasColumnType("text")
                        .HasColumnName("response");

                    b.Property<int>("StatusCode")
                        .HasColumnType("integer")
                        .HasColumnName("status_code");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_halo_log");

                    b.ToTable("halo_log", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.HaloReference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("HaloRef")
                        .HasColumnType("text")
                        .HasColumnName("halo_ref");

                    b.Property<int>("TableBookingId")
                        .HasColumnType("integer")
                        .HasColumnName("table_booking_id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_halo_reference");

                    b.ToTable("halo_reference", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("OutletId")
                        .HasColumnType("integer")
                        .HasColumnName("outlet_id");

                    b.Property<int>("Position")
                        .HasColumnType("integer")
                        .HasColumnName("position");

                    b.HasKey("Id")
                        .HasName("pk_menu");

                    b.HasIndex("OutletId")
                        .HasDatabaseName("ix_menu_outlet_id");

                    b.ToTable("menu", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.MenuItem", b =>
                {
                    b.Property<int>("MenuItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("menu_item_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MenuItemId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("DivisionId")
                        .HasColumnType("integer")
                        .HasColumnName("division_id");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean")
                        .HasColumnName("is_available");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_enabled");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<int>("MenuSectionId")
                        .HasColumnType("integer")
                        .HasColumnName("menu_section_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Position")
                        .HasColumnType("integer")
                        .HasColumnName("position");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("search_vector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Description" });

                    b.Property<decimal>("StockPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("stock_price");

                    b.HasKey("MenuItemId")
                        .HasName("pk_menu_item");

                    b.HasIndex("DivisionId")
                        .HasDatabaseName("ix_menu_item_division_id");

                    b.HasIndex("MenuSectionId")
                        .HasDatabaseName("ix_menu_item_menu_section_id");

                    b.HasIndex("SearchVector")
                        .HasDatabaseName("ix_menu_item_search_vector");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVector"), "GIN");

                    b.ToTable("menu_item", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.MenuItemBulkStock", b =>
                {
                    b.Property<int>("MenuItemId")
                        .HasColumnType("integer")
                        .HasColumnName("menu_item_id");

                    b.Property<int>("StockId")
                        .HasColumnType("integer")
                        .HasColumnName("stock_id");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric")
                        .HasColumnName("quantity");

                    b.HasKey("MenuItemId", "StockId")
                        .HasName("pk_menu_item_bulk_stock");

                    b.HasIndex("StockId")
                        .HasDatabaseName("ix_menu_item_bulk_stock_stock_id");

                    b.ToTable("menu_item_bulk_stock", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.MenuItemExtraGroup", b =>
                {
                    b.Property<int>("ExtraGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("extra_group_id");

                    b.Property<int>("MenuItemId")
                        .HasColumnType("integer")
                        .HasColumnName("menu_item_id");

                    b.HasKey("ExtraGroupId", "MenuItemId")
                        .HasName("pk_menu_item_extra_group");

                    b.HasIndex("MenuItemId")
                        .HasDatabaseName("ix_menu_item_extra_group_menu_item_id");

                    b.ToTable("menu_item_extra_group", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.MenuItemOptionGroup", b =>
                {
                    b.Property<int>("OptionGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("option_group_id");

                    b.Property<int>("MenuItemId")
                        .HasColumnType("integer")
                        .HasColumnName("menu_item_id");

                    b.HasKey("OptionGroupId", "MenuItemId")
                        .HasName("pk_menu_item_option_group");

                    b.HasIndex("MenuItemId")
                        .HasDatabaseName("ix_menu_item_option_group_menu_item_id");

                    b.ToTable("menu_item_option_group", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.MenuItemStock", b =>
                {
                    b.Property<int>("MenuItemId")
                        .HasColumnType("integer")
                        .HasColumnName("menu_item_id");

                    b.Property<int>("StockId")
                        .HasColumnType("integer")
                        .HasColumnName("stock_id");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric")
                        .HasColumnName("quantity");

                    b.HasKey("MenuItemId", "StockId")
                        .HasName("pk_menu_item_stock");

                    b.HasIndex("StockId")
                        .HasDatabaseName("ix_menu_item_stock_stock_id");

                    b.ToTable("menu_item_stock", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.MenuSection", b =>
                {
                    b.Property<int>("MenuSectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("menu_section_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MenuSectionId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<int>("MenuId")
                        .HasColumnType("integer")
                        .HasColumnName("menu_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_id");

                    b.Property<int?>("PositionId")
                        .HasColumnType("integer")
                        .HasColumnName("position_id");

                    b.HasKey("MenuSectionId")
                        .HasName("pk_menu_section");

                    b.HasIndex("MenuId")
                        .HasDatabaseName("ix_menu_section_menu_id");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_menu_section_parent_id");

                    b.ToTable("menu_section", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.NotificationLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("ChannelId")
                        .HasColumnType("integer")
                        .HasColumnName("channel_id");

                    b.Property<DateTime>("DateInserted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_inserted");

                    b.Property<string>("Error")
                        .HasColumnType("text")
                        .HasColumnName("error");

                    b.Property<int>("HttpStatusResponse")
                        .HasColumnType("integer")
                        .HasColumnName("http_status_response");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("boolean")
                        .HasColumnName("is_success");

                    b.Property<string>("Payload")
                        .HasColumnType("jsonb")
                        .HasColumnName("payload");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("token");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_notification_log");

                    b.ToTable("notification_log", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.NotificationUser", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("Token")
                        .HasColumnType("text")
                        .HasColumnName("token");

                    b.Property<DateTime>("DateInserted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_inserted");

                    b.HasKey("UserId", "Token")
                        .HasName("pk_notification_user");

                    b.ToTable("notification_user", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.Option", b =>
                {
                    b.Property<int>("OptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("option_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OptionId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("OptionGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("option_group_id");

                    b.Property<int>("OutletId")
                        .HasColumnType("integer")
                        .HasColumnName("outlet_id");

                    b.Property<int>("PositionId")
                        .HasColumnType("integer")
                        .HasColumnName("position_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.HasKey("OptionId")
                        .HasName("pk_option");

                    b.HasIndex("OptionGroupId")
                        .HasDatabaseName("ix_option_option_group_id");

                    b.ToTable("option", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.OptionGroup", b =>
                {
                    b.Property<int>("OptionGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("option_group_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OptionGroupId"));

                    b.Property<int>("MaxSelections")
                        .HasColumnType("integer")
                        .HasColumnName("max_selections");

                    b.Property<int>("MinSelections")
                        .HasColumnType("integer")
                        .HasColumnName("min_selections");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("OutletId")
                        .HasColumnType("integer")
                        .HasColumnName("outlet_id");

                    b.HasKey("OptionGroupId")
                        .HasName("pk_option_group");

                    b.ToTable("option_group", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.OptionStock", b =>
                {
                    b.Property<int>("OptionId")
                        .HasColumnType("integer")
                        .HasColumnName("option_id");

                    b.Property<int>("StockId")
                        .HasColumnType("integer")
                        .HasColumnName("stock_id");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric")
                        .HasColumnName("quantity");

                    b.HasKey("OptionId", "StockId")
                        .HasName("pk_option_stock");

                    b.HasIndex("StockId")
                        .HasDatabaseName("ix_option_stock_stock_id");

                    b.ToTable("option_stock", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.OrderGroup", b =>
                {
                    b.Property<int>("OrderGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("order_group_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderGroupId"));

                    b.HasKey("OrderGroupId")
                        .HasName("pk_order_group");

                    b.ToTable("order_group", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("order_item_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderItemId"));

                    b.Property<int>("MenuItemId")
                        .HasColumnType("integer")
                        .HasColumnName("menu_item_id");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<DateTime?>("OrderCompleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("order_completed");

                    b.Property<int?>("OrderGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("order_group_id");

                    b.Property<int>("OrderItemStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("order_item_status_id");

                    b.Property<DateTime>("OrderReceived")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("order_received");

                    b.Property<DateTime>("OrderUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("order_updated");

                    b.Property<int>("TableBookingId")
                        .HasColumnType("integer")
                        .HasColumnName("table_booking_id");

                    b.HasKey("OrderItemId")
                        .HasName("pk_order_item");

                    b.HasIndex("MenuItemId")
                        .HasDatabaseName("ix_order_item_menu_item_id");

                    b.HasIndex("OrderGroupId")
                        .HasDatabaseName("ix_order_item_order_group_id");

                    b.HasIndex("OrderItemStatusId")
                        .HasDatabaseName("ix_order_item_order_item_status_id");

                    b.HasIndex("TableBookingId")
                        .HasDatabaseName("ix_order_item_table_booking_id");

                    b.ToTable("order_item", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.OrderItemExtra", b =>
                {
                    b.Property<int>("OrderItemExtraId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("order_item_extra_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderItemExtraId"));

                    b.Property<int>("ExtraId")
                        .HasColumnType("integer")
                        .HasColumnName("extra_id");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("integer")
                        .HasColumnName("order_item_id");

                    b.HasKey("OrderItemExtraId")
                        .HasName("pk_order_item_extra");

                    b.HasIndex("ExtraId")
                        .HasDatabaseName("ix_order_item_extra_extra_id");

                    b.HasIndex("OrderItemId")
                        .HasDatabaseName("ix_order_item_extra_order_item_id");

                    b.ToTable("order_item_extra", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.OrderItemOption", b =>
                {
                    b.Property<int>("OrderItemOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("order_item_option_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderItemOptionId"));

                    b.Property<int>("OptionId")
                        .HasColumnType("integer")
                        .HasColumnName("option_id");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("integer")
                        .HasColumnName("order_item_id");

                    b.HasKey("OrderItemOptionId")
                        .HasName("pk_order_item_option");

                    b.HasIndex("OptionId")
                        .HasDatabaseName("ix_order_item_option_option_id");

                    b.HasIndex("OrderItemId")
                        .HasDatabaseName("ix_order_item_option_order_item_id");

                    b.ToTable("order_item_option", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.OrderItemStatus", b =>
                {
                    b.Property<int>("OrderItemStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("order_item_status_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderItemStatusId"));

                    b.Property<bool>("AssignGroup")
                        .HasColumnType("boolean")
                        .HasColumnName("assign_group");

                    b.Property<bool>("IsBackOffice")
                        .HasColumnType("boolean")
                        .HasColumnName("is_back_office");

                    b.Property<bool>("IsBillable")
                        .HasColumnType("boolean")
                        .HasColumnName("is_billable");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_cancelled");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("boolean")
                        .HasColumnName("is_complete");

                    b.Property<bool>("IsFrontLine")
                        .HasColumnType("boolean")
                        .HasColumnName("is_front_line");

                    b.Property<bool>("IsHistory")
                        .HasColumnType("boolean")
                        .HasColumnName("is_history");

                    b.Property<bool>("IsNotify")
                        .HasColumnType("boolean")
                        .HasColumnName("is_notify");

                    b.Property<bool>("IsUpdateStock")
                        .HasColumnType("boolean")
                        .HasColumnName("is_update_stock");

                    b.Property<bool>("IsUpdateStockReverse")
                        .HasColumnType("boolean")
                        .HasColumnName("is_update_stock_reverse");

                    b.Property<int>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("priority");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.HasKey("OrderItemStatusId")
                        .HasName("pk_order_item_status");

                    b.ToTable("order_item_status", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.Outlet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<int>("BusinessId")
                        .HasColumnType("integer")
                        .HasColumnName("business_id");

                    b.Property<string>("Company")
                        .HasColumnType("text")
                        .HasColumnName("company");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("Logo")
                        .HasColumnType("text")
                        .HasColumnName("logo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Registration")
                        .HasColumnType("text")
                        .HasColumnName("registration");

                    b.Property<string>("VATNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("vat_number");

                    b.HasKey("Id")
                        .HasName("pk_outlet");

                    b.HasIndex("BusinessId")
                        .HasDatabaseName("ix_outlet_business_id");

                    b.ToTable("outlet", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.OutletExtraGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ExtraGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("extra_group_id");

                    b.Property<int>("OutletId")
                        .HasColumnType("integer")
                        .HasColumnName("outlet_id");

                    b.HasKey("Id")
                        .HasName("pk_outlet_extra_group");

                    b.HasIndex("ExtraGroupId")
                        .HasDatabaseName("ix_outlet_extra_group_extra_group_id");

                    b.HasIndex("OutletId")
                        .HasDatabaseName("ix_outlet_extra_group_outlet_id");

                    b.ToTable("outlet_extra_group", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.OutletPaymentType", b =>
                {
                    b.Property<int>("OutletId")
                        .HasColumnType("integer")
                        .HasColumnName("outlet_id");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("payment_type_id");

                    b.Property<int>("Position")
                        .HasColumnType("integer")
                        .HasColumnName("position");

                    b.HasKey("OutletId", "PaymentTypeId")
                        .HasName("pk_outlet_payment_type");

                    b.HasIndex("PaymentTypeId")
                        .HasDatabaseName("ix_outlet_payment_type_payment_type_id");

                    b.ToTable("outlet_payment_type", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<DateTime>("DateReceived")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_received");

                    b.Property<string>("PaymentReference")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payment_reference");

                    b.Property<int?>("PaymentTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("payment_type_id");

                    b.Property<int>("TableBookingId")
                        .HasColumnType("integer")
                        .HasColumnName("table_booking_id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_payment");

                    b.HasIndex("PaymentReference")
                        .IsUnique()
                        .HasDatabaseName("ix_payment_payment_reference");

                    b.HasIndex("PaymentTypeId")
                        .HasDatabaseName("ix_payment_payment_type_id");

                    b.HasIndex("TableBookingId")
                        .HasDatabaseName("ix_payment_table_booking_id");

                    b.ToTable("payment", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.PaymentType", b =>
                {
                    b.Property<int>("PaymentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("payment_type_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PaymentTypeId"));

                    b.Property<bool>("CanEdit")
                        .HasColumnType("boolean")
                        .HasColumnName("can_edit");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("numeric")
                        .HasColumnName("discount_percentage");

                    b.Property<string>("PaymentTypeName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payment_type_name");

                    b.Property<decimal>("TipLevyPercentage")
                        .HasColumnType("numeric")
                        .HasColumnName("tip_levy_percentage");

                    b.HasKey("PaymentTypeId")
                        .HasName("pk_payment_type");

                    b.ToTable("payment_type", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.Printer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<int>("DeviceId")
                        .HasColumnType("integer")
                        .HasColumnName("device_id");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ip_address");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_enabled");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<int>("LineCharacters")
                        .HasColumnType("integer")
                        .HasColumnName("line_characters");

                    b.Property<int>("OutletId")
                        .HasColumnType("integer")
                        .HasColumnName("outlet_id");

                    b.Property<int>("Port")
                        .HasColumnType("integer")
                        .HasColumnName("port");

                    b.Property<string>("PrinterName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("printer_name");

                    b.HasKey("Id")
                        .HasName("pk_printer");

                    b.ToTable("printer", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoleId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("OutletId")
                        .HasColumnType("integer")
                        .HasColumnName("outlet_id");

                    b.Property<int>("RoleTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("role_type_id");

                    b.HasKey("RoleId")
                        .HasName("pk_role");

                    b.HasIndex("RoleTypeId")
                        .HasDatabaseName("ix_role_role_type_id");

                    b.ToTable("role", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.RoleDivision", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DivisionId")
                        .HasColumnType("integer")
                        .HasColumnName("division_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_role_division");

                    b.HasIndex("DivisionId")
                        .HasDatabaseName("ix_role_division_division_id");

                    b.ToTable("role_division", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.RoleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<bool>("isBackOffice")
                        .HasColumnType("boolean")
                        .HasColumnName("is_back_office");

                    b.Property<bool>("isFrontLine")
                        .HasColumnType("boolean")
                        .HasColumnName("is_front_line");

                    b.HasKey("Id")
                        .HasName("pk_role_type");

                    b.ToTable("role_type", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.SalesPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("OutletId")
                        .HasColumnType("integer")
                        .HasColumnName("outlet_id");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.HasKey("Id")
                        .HasName("pk_sales_period");

                    b.HasIndex("OutletId")
                        .HasDatabaseName("ix_sales_period_outlet_id");

                    b.ToTable("sales_period", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("OutletId")
                        .HasColumnType("integer")
                        .HasColumnName("outlet_id");

                    b.HasKey("Id")
                        .HasName("pk_section");

                    b.HasIndex("OutletId")
                        .HasDatabaseName("ix_section_outlet_id");

                    b.ToTable("section", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<bool>("HasVat")
                        .HasColumnType("boolean")
                        .HasColumnName("has_vat");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("OutletId")
                        .HasColumnType("integer")
                        .HasColumnName("outlet_id");

                    b.Property<int>("StockCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("stock_category_id");

                    b.Property<int>("UnitId")
                        .HasColumnType("integer")
                        .HasColumnName("unit_id");

                    b.HasKey("Id")
                        .HasName("pk_stock");

                    b.HasIndex("StockCategoryId")
                        .HasDatabaseName("ix_stock_stock_category_id");

                    b.HasIndex("UnitId")
                        .HasDatabaseName("ix_stock_unit_id");

                    b.ToTable("stock", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.StockAllocate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AssignedUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("assigned_user_id");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("Completed")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<int>("FromDivisionId")
                        .HasColumnType("integer")
                        .HasColumnName("from_division_id");

                    b.Property<string>("FromUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("from_user_id");

                    b.Property<int>("OutletId")
                        .HasColumnType("integer")
                        .HasColumnName("outlet_id");

                    b.Property<int>("StockAllocateStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("stock_allocate_status_id");

                    b.Property<int>("ToDivisionId")
                        .HasColumnType("integer")
                        .HasColumnName("to_division_id");

                    b.Property<int>("ToOutletId")
                        .HasColumnType("integer")
                        .HasColumnName("to_outlet_id");

                    b.HasKey("Id")
                        .HasName("pk_stock_allocate");

                    b.HasIndex("AssignedUserId")
                        .HasDatabaseName("ix_stock_allocate_assigned_user_id");

                    b.HasIndex("FromDivisionId")
                        .HasDatabaseName("ix_stock_allocate_from_division_id");

                    b.HasIndex("FromUserId")
                        .HasDatabaseName("ix_stock_allocate_from_user_id");

                    b.HasIndex("OutletId")
                        .HasDatabaseName("ix_stock_allocate_outlet_id");

                    b.HasIndex("StockAllocateStatusId")
                        .HasDatabaseName("ix_stock_allocate_stock_allocate_status_id");

                    b.HasIndex("ToDivisionId")
                        .HasDatabaseName("ix_stock_allocate_to_division_id");

                    b.HasIndex("ToOutletId")
                        .HasDatabaseName("ix_stock_allocate_to_outlet_id");

                    b.ToTable("stock_allocate", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.StockAllocateItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Actual")
                        .HasColumnType("numeric")
                        .HasColumnName("actual");

                    b.Property<string>("AssignedUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("assigned_user_id");

                    b.Property<DateTime>("Completed")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<int>("StockAllocateId")
                        .HasColumnType("integer")
                        .HasColumnName("stock_allocate_id");

                    b.Property<int>("StockAllocateItemStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("stock_allocate_item_status_id");

                    b.Property<int>("StockId")
                        .HasColumnType("integer")
                        .HasColumnName("stock_id");

                    b.HasKey("Id")
                        .HasName("pk_stock_allocate_item");

                    b.HasIndex("AssignedUserId")
                        .HasDatabaseName("ix_stock_allocate_item_assigned_user_id");

                    b.HasIndex("StockAllocateId")
                        .HasDatabaseName("ix_stock_allocate_item_stock_allocate_id");

                    b.HasIndex("StockAllocateItemStatusId")
                        .HasDatabaseName("ix_stock_allocate_item_stock_allocate_item_status_id");

                    b.HasIndex("StockId")
                        .HasDatabaseName("ix_stock_allocate_item_stock_id");

                    b.ToTable("stock_allocate_item", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.StockAllocateItemStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_stock_allocate_item_status");

                    b.ToTable("stock_allocate_item_status", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.StockAllocateStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_stock_allocate_status");

                    b.ToTable("stock_allocate_status", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.StockCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("OutletId")
                        .HasColumnType("integer")
                        .HasColumnName("outlet_id");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_id");

                    b.HasKey("Id")
                        .HasName("pk_stock_category");

                    b.ToTable("stock_category", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.StockItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Actual")
                        .HasColumnType("numeric")
                        .HasColumnName("actual");

                    b.Property<int>("DivisionId")
                        .HasColumnType("integer")
                        .HasColumnName("division_id");

                    b.Property<int>("StockId")
                        .HasColumnType("integer")
                        .HasColumnName("stock_id");

                    b.Property<decimal>("Threshold")
                        .HasColumnType("numeric")
                        .HasColumnName("threshold");

                    b.HasKey("Id")
                        .HasName("pk_stock_item");

                    b.HasIndex("DivisionId")
                        .HasDatabaseName("ix_stock_item_division_id");

                    b.HasIndex("StockId", "DivisionId")
                        .IsUnique()
                        .HasDatabaseName("ix_stock_item_stock_id_division_id");

                    b.ToTable("stock_item", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.StockItemAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("FromActual")
                        .HasColumnType("numeric")
                        .HasColumnName("from_actual");

                    b.Property<int?>("OrderItemId")
                        .HasColumnType("integer")
                        .HasColumnName("order_item_id");

                    b.Property<int?>("StockAllocateId")
                        .HasColumnType("integer")
                        .HasColumnName("stock_allocate_id");

                    b.Property<int?>("StockId")
                        .HasColumnType("integer")
                        .HasColumnName("stock_id");

                    b.Property<int>("StockItemAuditTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("stock_item_audit_type_id");

                    b.Property<int>("StockItemId")
                        .HasColumnType("integer")
                        .HasColumnName("stock_item_id");

                    b.Property<int?>("StockOrderId")
                        .HasColumnType("integer")
                        .HasColumnName("stock_order_id");

                    b.Property<decimal>("ToActual")
                        .HasColumnType("numeric")
                        .HasColumnName("to_actual");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_stock_item_audit");

                    b.HasIndex("StockItemAuditTypeId")
                        .HasDatabaseName("ix_stock_item_audit_stock_item_audit_type_id");

                    b.ToTable("stock_item_audit", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.StockItemAuditType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_stock_item_audit_type");

                    b.ToTable("stock_item_audit_type", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.StockOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<int>("DivisionId")
                        .HasColumnType("integer")
                        .HasColumnName("division_id");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("order_date");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("order_number");

                    b.Property<int>("OutletId")
                        .HasColumnType("integer")
                        .HasColumnName("outlet_id");

                    b.Property<int>("StockOrderStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("stock_order_status_id");

                    b.Property<int>("SupplierId")
                        .HasColumnType("integer")
                        .HasColumnName("supplier_id");

                    b.HasKey("Id")
                        .HasName("pk_stock_order");

                    b.HasIndex("DivisionId")
                        .HasDatabaseName("ix_stock_order_division_id");

                    b.HasIndex("StockOrderStatusId")
                        .HasDatabaseName("ix_stock_order_stock_order_status_id");

                    b.HasIndex("SupplierId")
                        .HasDatabaseName("ix_stock_order_supplier_id");

                    b.ToTable("stock_order", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.StockOrderItem", b =>
                {
                    b.Property<int>("StockOrderId")
                        .HasColumnType("integer")
                        .HasColumnName("stock_order_id");

                    b.Property<int>("StockId")
                        .HasColumnType("integer")
                        .HasColumnName("stock_id");

                    b.Property<decimal>("Actual")
                        .HasColumnType("numeric")
                        .HasColumnName("actual");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<decimal>("OrderAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("order_amount");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<int>("StockOrderItemStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("stock_order_item_status_id");

                    b.HasKey("StockOrderId", "StockId")
                        .HasName("pk_stock_order_item");

                    b.HasIndex("StockId")
                        .HasDatabaseName("ix_stock_order_item_stock_id");

                    b.HasIndex("StockOrderItemStatusId")
                        .HasDatabaseName("ix_stock_order_item_stock_order_item_status_id");

                    b.ToTable("stock_order_item", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.StockOrderItemStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_stock_order_item_status");

                    b.ToTable("stock_order_item_status", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.StockOrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_stock_order_status");

                    b.ToTable("stock_order_status", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("contact_name");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("contact_number");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("OutletId")
                        .HasColumnType("integer")
                        .HasColumnName("outlet_id");

                    b.HasKey("Id")
                        .HasName("pk_supplier");

                    b.ToTable("supplier", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.Table", b =>
                {
                    b.Property<int>("TableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("table_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TableId"));

                    b.Property<int>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("capacity");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Position")
                        .HasColumnType("integer")
                        .HasColumnName("position");

                    b.Property<int>("SectionId")
                        .HasColumnType("integer")
                        .HasColumnName("section_id");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.HasKey("TableId")
                        .HasName("pk_table");

                    b.HasIndex("SectionId")
                        .HasDatabaseName("ix_table_section_id");

                    b.ToTable("table", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.TableBooking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("booking_date");

                    b.Property<string>("BookingName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("booking_name");

                    b.Property<int?>("CashUpUserId")
                        .HasColumnType("integer")
                        .HasColumnName("cash_up_user_id");

                    b.Property<DateTime?>("CloseDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("close_date");

                    b.Property<int>("SalesPeriodId")
                        .HasColumnType("integer")
                        .HasColumnName("sales_period_id");

                    b.Property<int>("TableId")
                        .HasColumnType("integer")
                        .HasColumnName("table_id");

                    b.Property<decimal?>("Total")
                        .HasColumnType("numeric")
                        .HasColumnName("total");

                    b.Property<decimal?>("TotalPayments")
                        .HasColumnType("numeric")
                        .HasColumnName("total_payments");

                    b.Property<decimal?>("TotalTips")
                        .HasColumnType("numeric")
                        .HasColumnName("total_tips");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_table_booking");

                    b.HasIndex("CashUpUserId")
                        .HasDatabaseName("ix_table_booking_cash_up_user_id");

                    b.HasIndex("SalesPeriodId")
                        .HasDatabaseName("ix_table_booking_sales_period_id");

                    b.HasIndex("TableId")
                        .HasDatabaseName("ix_table_booking_table_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_table_booking_user_id");

                    b.ToTable("table_booking", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("tag_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TagId"));

                    b.Property<int?>("MenuItemId")
                        .HasColumnType("integer")
                        .HasColumnName("menu_item_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("TagId")
                        .HasName("pk_tag");

                    b.HasIndex("MenuItemId")
                        .HasDatabaseName("ix_tag_menu_item_id");

                    b.ToTable("tag", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_unit");

                    b.ToTable("unit", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("UserId")
                        .HasName("pk_user");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.UserOutlet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("boolean")
                        .HasColumnName("is_current");

                    b.Property<int>("OutletId")
                        .HasColumnType("integer")
                        .HasColumnName("outlet_id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_outlet");

                    b.HasIndex("OutletId")
                        .HasDatabaseName("ix_user_outlet_outlet_id");

                    b.ToTable("user_outlet", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.UserRoleOutlet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<int>("OutletId")
                        .HasColumnType("integer")
                        .HasColumnName("outlet_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_role_outlet");

                    b.HasIndex("OutletId")
                        .HasDatabaseName("ix_user_role_outlet_outlet_id");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_role_outlet_role_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_role_outlet_user_id");

                    b.ToTable("user_role_outlet", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.VATRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_vat_rate");

                    b.ToTable("vat_rate", (string)null);
                });

            modelBuilder.Entity("OrderItemStatusAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("OrderItemId")
                        .HasColumnType("integer")
                        .HasColumnName("order_item_id");

                    b.Property<int>("OrderItemStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("order_item_status_id");

                    b.Property<DateTime>("StatusDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("status_date");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_order_item_status_audit");

                    b.ToTable("order_item_status_audit", (string)null);
                });

            modelBuilder.Entity("Kayord.Pos.Entities.Adjustment", b =>
                {
                    b.HasOne("Kayord.Pos.Entities.AdjustmentType", "AdjustmentType")
                        .WithMany()
                        .HasForeignKey("AdjustmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_adjustment_adjustment_type_adjustment_type_id");

                    b.HasOne("Kayord.Pos.Entities.TableBooking", null)
                        .WithMany("Adjustments")
                        .HasForeignKey("TableBookingId")
                        .HasConstraintName("fk_adjustment_table_booking_table_booking_id");

                    b.Navigation("AdjustmentType");
                });

            modelBuilder.Entity("Kayord.Pos.Entities.AdjustmentTypeOutlet", b =>
                {
                    b.HasOne("Kayord.Pos.Entities.AdjustmentType", "AdjustmentType")
                        .WithMany()
                        .HasForeignKey("AdjustmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_adjustment_type_outlet_adjustment_type_adjustment_type_id");

                    b.HasOne("Kayord.Pos.Entities.Outlet", "Outlet")
                        .WithMany()
                        .HasForeignKey("OutletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_adjustment_type_outlet_outlet_outlet_id");

                    b.Navigation("AdjustmentType");

                    b.Navigation("Outlet");
                });

            modelBuilder.Entity("Kayord.Pos.Entities.CashUp", b =>
                {
                    b.HasOne("Kayord.Pos.Entities.SalesPeriod", "SalesPeriod")
                        .WithMany()
                        .HasForeignKey("SalesPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cash_up_sales_period_sales_period_id");

                    b.Navigation("SalesPeriod");
                });

            modelBuilder.Entity("Kayord.Pos.Entities.CashUpUserItem", b =>
                {
                    b.HasOne("Kayord.Pos.Entities.CashUpUser", "CashUpUser")
                        .WithMany("CashUpUserItems")
                        .HasForeignKey("CashUpUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cash_up_user_item_cash_up_user_cash_up_user_id");

                    b.HasOne("Kayord.Pos.Entities.CashUpUserItemType", "CashUpUserItemType")
                        .WithMany()
                        .HasForeignKey("CashUpUserItemTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cash_up_user_item_cash_up_user_item_type_cash_up_user_item_");

                    b.Navigation("CashUpUser");

                    b.Navigation("CashUpUserItemType");
                });

            modelBuilder.Entity("Kayord.Pos.Entities.CashUpUserItemType", b =>
                {
                    b.HasOne("Kayord.Pos.Entities.AdjustmentType", "AdjustmentType")
                        .WithMany()
                        .HasForeignKey("AdjustmentTypeId")
                        .HasConstraintName("fk_cash_up_user_item_type_adjustment_type_adjustment_type_id");

                    b.HasOne("Kayord.Pos.Entities.CashUpConfig", "CashupConfig")
                        .WithMany()
                        .HasForeignKey("CashupConfigId")
                        .HasConstraintName("fk_cash_up_user_item_type_cash_up_config_cashup_config_id");

                    b.HasOne("Kayord.Pos.Entities.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId")
                        .HasConstraintName("fk_cash_up_user_item_type_payment_type_payment_type_id");

                    b.Navigation("AdjustmentType");

                    b.Navigation("CashupConfig");

                    b.Navigation("PaymentType");
                });

            modelBuilder.Entity("Kayord.Pos.Entities.Clock", b =>
                {
                    b.HasOne("Kayord.Pos.Entities.Outlet", "Outlet")
                        .WithMany()
                        .HasForeignKey("OutletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_clock_outlet_outlet_id");

                    b.HasOne("Kayord.Pos.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_clock_user_user_id");

                    b.Navigation("Outlet");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Kayord.Pos.Entities.Customer", b =>
                {
                    b.HasOne("Kayord.Pos.Entities.Table", null)
                        .WithMany("Customers")
                        .HasForeignKey("TableId")
                        .HasConstraintName("fk_customer_table_table_id");
                });

            modelBuilder.Entity("Kayord.Pos.Entities.Extra", b =>
                {
                    b.HasOne("Kayord.Pos.Entities.ExtraGroup", "ExtraGroup")
                        .WithMany("Extras")
                        .HasForeignKey("ExtraGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_extra_extra_group_extra_group_id");

                    b.Navigation("ExtraGroup");
                });

            modelBuilder.Entity("Kayord.Pos.Entities.ExtraStock", b =>
                {
                    b.HasOne("Kayord.Pos.Entities.Extra", "Extra")
                        .WithMany()
                        .HasForeignKey("ExtraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_extra_stock_extra_extra_id");

                    b.HasOne("Kayord.Pos.Entities.Stock", "Stock")
                        .WithMany()
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_extra_stock_stock_stock_id");

                    b.Navigation("Extra");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("Kayord.Pos.Entities.Menu", b =>
                {
                    b.HasOne("Kayord.Pos.Entities.Outlet", "Outlet")
                        .WithMany()
                        .HasForeignKey("OutletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_menu_outlet_outlet_id");

                    b.Navigation("Outlet");
                });

            modelBuilder.Entity("Kayord.Pos.Entities.MenuItem", b =>
                {
                    b.HasOne("Kayord.Pos.Entities.Division", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId")
                        .HasConstraintName("fk_menu_item_division_division_id");

                    b.HasOne("Kayord.Pos.Entities.MenuSection", "MenuSection")
                        .WithMany("MenuItems")
                        .HasForeignKey("MenuSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_menu_item_menu_section_menu_section_id");

                    b.Navigation("Division");

                    b.Navigation("MenuSection");
                });

            modelBuilder.Entity("Kayord.Pos.Entities.MenuItemBulkStock", b =>
                {
                    b.HasOne("Kayord.Pos.Entities.MenuItem", "MenuItem")
                        .WithMany()
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_menu_item_bulk_stock_menu_item_menu_item_id");

                    b.HasOne("Kayord.Pos.Entities.Stock", "Stock")
                        .WithMany()
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_menu_item_bulk_stock_stock_stock_id");

                    b.Navigation("MenuItem");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("Kayord.Pos.Entities.MenuItemExtraGroup", b =>
                {
                    b.HasOne("Kayord.Pos.Entities.ExtraGroup", "ExtraGroup")
                        .WithMany("MenuItemExtraGroups")
                        .HasForeignKey("ExtraGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_menu_item_extra_group_extra_group_extra_group_id");

                    b.HasOne("Kayord.Pos.Entities.MenuItem", "MenuItem")
                        .WithMany("MenuItemExtraGroups")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_menu_item_extra_group_menu_item_menu_item_id");

                    b.Navigation("ExtraGroup");

                    b.Navigation("MenuItem");
                });

            modelBuilder.Entity("Kayord.Pos.Entities.MenuItemOptionGroup", b =>
                {
                    b.HasOne("Kayord.Pos.Entities.MenuItem", "MenuItem")
                        .WithMany("MenuItemOptionGroups")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_menu_item_option_group_menu_item_menu_item_id");

                    b.HasOne("Kayord.Pos.Entities.OptionGroup", "OptionGroup")
                        .WithMany("MenuItemOptionGroups")
                        .HasForeignKey("OptionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_menu_item_option_group_option_group_option_group_id");

                    b.Navigation("MenuItem");

                    b.Navigation("OptionGroup");
                });

            modelBuilder.Entity("Kayord.Pos.Entities.MenuItemStock", b =>
                {
                    b.HasOne("Kayord.Pos.Entities.MenuItem", "MenuItem")
                        .WithMany()
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_menu_item_stock_menu_item_menu_item_id");

                    b.HasOne("Kayord.Pos.Entities.Stock", "Stock")
                        .WithMany()
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_menu_item_stock_stock_stock_id");

                    b.Navigation("MenuItem");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("Kayord.Pos.Entities.MenuSection", b =>
                {
                    b.HasOne("Kayord.Pos.Entities.Menu", "Menu")
                        .WithMany("MenuSections")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_menu_section_menu_menu_id");

                    b.HasOne("Kayord.Pos.Entities.MenuSection", "Parent")
                        .WithMany("SubMenuSections")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fk_menu_section_menu_section_parent_id");

                    b.Navigation("Menu");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Kayord.Pos.Entities.Option", b =>
                {
                    b.HasOne("Kayord.Pos.Entities.OptionGroup", "OptionGroup")
                        .WithMany("Options")
                        .HasForeignKey("OptionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_option_option_group_option_group_id");

                    b.Navigation("OptionGroup");
                });

            modelBuilder.Entity("Kayord.Pos.Entities.OptionStock", b =>
                {
                    b.HasOne("Kayord.Pos.Entities.Option", "Option")
                        .WithMany()
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_option_stock_option_option_id");

                    b.HasOne("Kayord.Pos.Entities.Stock", "Stock")
                        .WithMany()
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_option_stock_stock_stock_id");

                    b.Navigation("Option");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("Kayord.Pos.Entities.OrderItem", b =>
                {
                    b.HasOne("Kayord.Pos.Entities.MenuItem", "MenuItem")
                        .WithMany()
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_item_menu_item_menu_item_id");

                    b.HasOne("Kayord.Pos.Entities.OrderGroup", "OrderGroup")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderGroupId")
                        .HasConstraintName("fk_order_item_order_group_order_group_id");

                    b.HasOne("Kayord.Pos.Entities.OrderItemStatus", "OrderItemStatus")
                        .WithMany()
                        .HasForeignKey("OrderItemStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_item_order_item_status_order_item_status_id");

                    b.HasOne("Kayord.Pos.Entities.TableBooking", "TableBooking")
                        .WithMany("OrderItems")
                        .HasForeignKey("TableBookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_item_table_booking_table_booking_id");

                    b.Navigation("MenuItem");

                    b.Navigation("OrderGroup");

                    b.Navigation("OrderItemStatus");

                    b.Navigation("TableBooking");
                });

            modelBuilder.Entity("Kayord.Pos.Entities.OrderItemExtra", b =>
                {
                    b.HasOne("Kayord.Pos.Entities.Extra", "Extra")
                        .WithMany("OrderItemExtras")
                        .HasForeignKey("ExtraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_item_extra_extra_extra_id");

                    b.HasOne("Kayord.Pos.Entities.OrderItem", "OrderItem")
                        .WithMany("OrderItemExtras")
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_item_extra_order_item_order_item_id");

                    b.Navigation("Extra");

                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("Kayord.Pos.Entities.OrderItemOption", b =>
                {
                    b.HasOne("Kayord.Pos.Entities.Option", "Option")
                        .WithMany("OrderItemOptions")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_item_option_option_option_id");

                    b.HasOne("Kayord.Pos.Entities.OrderItem", "OrderItem")
                        .WithMany("OrderItemOptions")
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_item_option_order_item_order_item_id");

                    b.Navigation("Option");

                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("Kayord.Pos.Entities.Outlet", b =>
                {
                    b.HasOne("Kayord.Pos.Entities.Business", "Business")
                        .WithMany("Outlets")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_outlet_business_business_id");

                    b.Navigation("Business");
                });

            modelBuilder.Entity("Kayord.Pos.Entities.OutletExtraGroup", b =>
                {
                    b.HasOne("Kayord.Pos.Entities.ExtraGroup", "ExtraGroup")
                        .WithMany()
                        .HasForeignKey("ExtraGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_outlet_extra_group_extra_group_extra_group_id");

                    b.HasOne("Kayord.Pos.Entities.Outlet", "Outlet")
                        .WithMany()
                        .HasForeignKey("OutletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_outlet_extra_group_outlet_outlet_id");

                    b.Navigation("ExtraGroup");

                    b.Navigation("Outlet");
                });

            modelBuilder.Entity("Kayord.Pos.Entities.OutletPaymentType", b =>
                {
                    b.HasOne("Kayord.Pos.Entities.Outlet", "Outlet")
                        .WithMany("OutletPaymentTypes")
                        .HasForeignKey("OutletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_outlet_payment_type_outlet_outlet_id");

                    b.HasOne("Kayord.Pos.Entities.PaymentType", "PaymentType")
                        .WithMany("OutletPaymentTypes")
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_outlet_payment_type_payment_type_payment_type_id");

                    b.Navigation("Outlet");

                    b.Navigation("PaymentType");
                });

            modelBuilder.Entity("Kayord.Pos.Entities.Payment", b =>
                {
                    b.HasOne("Kayord.Pos.Entities.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId")
                        .HasConstraintName("fk_payment_payment_type_payment_type_id");

                    b.HasOne("Kayord.Pos.Entities.TableBooking", "TableBooking")
                        .WithMany("Payments")
                        .HasForeignKey("TableBookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_payment_table_booking_table_booking_id");

                    b.Navigation("PaymentType");

                    b.Navigation("TableBooking");
                });

            modelBuilder.Entity("Kayord.Pos.Entities.Role", b =>
                {
                    b.HasOne("Kayord.Pos.Entities.RoleType", "RoleType")
                        .WithMany()
                        .HasForeignKey("RoleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_role_type_role_type_id");

                    b.Navigation("RoleType");
                });

            modelBuilder.Entity("Kayord.Pos.Entities.RoleDivision", b =>
                {
                    b.HasOne("Kayord.Pos.Entities.Division", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_division_division_division_id");

                    b.Navigation("Division");
                });

            modelBuilder.Entity("Kayord.Pos.Entities.SalesPeriod", b =>
                {
                    b.HasOne("Kayord.Pos.Entities.Outlet", "Outlet")
                        .WithMany()
                        .HasForeignKey("OutletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sales_period_outlet_outlet_id");

                    b.Navigation("Outlet");
                });

            modelBuilder.Entity("Kayord.Pos.Entities.Section", b =>
                {
                    b.HasOne("Kayord.Pos.Entities.Outlet", "Outlet")
                        .WithMany("Sections")
                        .HasForeignKey("OutletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_section_outlet_outlet_id");

                    b.Navigation("Outlet");
                });

            modelBuilder.Entity("Kayord.Pos.Entities.Stock", b =>
                {
                    b.HasOne("Kayord.Pos.Entities.StockCategory", "StockCategory")
                        .WithMany()
                        .HasForeignKey("StockCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_stock_stock_category_stock_category_id");

                    b.HasOne("Kayord.Pos.Entities.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_stock_unit_unit_id");

                    b.Navigation("StockCategory");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Kayord.Pos.Entities.StockAllocate", b =>
                {
                    b.HasOne("Kayord.Pos.Entities.User", "AssignedUser")
                        .WithMany()
                        .HasForeignKey("AssignedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_stock_allocate_user_assigned_user_id");

                    b.HasOne("Kayord.Pos.Entities.Division", "FromDivision")
                        .WithMany()
                        .HasForeignKey("FromDivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_stock_allocate_division_from_division_id");

                    b.HasOne("Kayord.Pos.Entities.User", "FromUser")
                        .WithMany()
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_stock_allocate_user_from_user_id");

                    b.HasOne("Kayord.Pos.Entities.Outlet", "Outlet")
                        .WithMany()
                        .HasForeignKey("OutletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_stock_allocate_outlet_outlet_id");

                    b.HasOne("Kayord.Pos.Entities.StockAllocateStatus", "StockAllocateStatus")
                        .WithMany()
                        .HasForeignKey("StockAllocateStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_stock_allocate_stock_allocate_status_stock_allocate_status_");

                    b.HasOne("Kayord.Pos.Entities.Division", "ToDivision")
                        .WithMany()
                        .HasForeignKey("ToDivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_stock_allocate_division_to_division_id");

                    b.HasOne("Kayord.Pos.Entities.Outlet", "ToOutlet")
                        .WithMany()
                        .HasForeignKey("ToOutletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_stock_allocate_outlet_to_outlet_id");

                    b.Navigation("AssignedUser");

                    b.Navigation("FromDivision");

                    b.Navigation("FromUser");

                    b.Navigation("Outlet");

                    b.Navigation("StockAllocateStatus");

                    b.Navigation("ToDivision");

                    b.Navigation("ToOutlet");
                });

            modelBuilder.Entity("Kayord.Pos.Entities.StockAllocateItem", b =>
                {
                    b.HasOne("Kayord.Pos.Entities.User", "AssignedUser")
                        .WithMany()
                        .HasForeignKey("AssignedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_stock_allocate_item_user_assigned_user_id");

                    b.HasOne("Kayord.Pos.Entities.StockAllocate", "StockAllocate")
                        .WithMany("StockAllocateItems")
                        .HasForeignKey("StockAllocateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_stock_allocate_item_stock_allocate_stock_allocate_id");

                    b.HasOne("Kayord.Pos.Entities.StockAllocateItemStatus", "StockAllocateItemStatus")
                        .WithMany()
                        .HasForeignKey("StockAllocateItemStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_stock_allocate_item_stock_allocate_item_status_stock_alloca");

                    b.HasOne("Kayord.Pos.Entities.Stock", "Stock")
                        .WithMany()
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_stock_allocate_item_stock_stock_id");

                    b.Navigation("AssignedUser");

                    b.Navigation("Stock");

                    b.Navigation("StockAllocate");

                    b.Navigation("StockAllocateItemStatus");
                });

            modelBuilder.Entity("Kayord.Pos.Entities.StockItem", b =>
                {
                    b.HasOne("Kayord.Pos.Entities.Division", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_stock_item_division_division_id");

                    b.HasOne("Kayord.Pos.Entities.Stock", "Stock")
                        .WithMany("StockItems")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_stock_item_stock_stock_id");

                    b.Navigation("Division");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("Kayord.Pos.Entities.StockItemAudit", b =>
                {
                    b.HasOne("Kayord.Pos.Entities.StockItemAuditType", "StockItemAuditType")
                        .WithMany()
                        .HasForeignKey("StockItemAuditTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_stock_item_audit_stock_item_audit_type_stock_item_audit_typ");

                    b.Navigation("StockItemAuditType");
                });

            modelBuilder.Entity("Kayord.Pos.Entities.StockOrder", b =>
                {
                    b.HasOne("Kayord.Pos.Entities.Division", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_stock_order_division_division_id");

                    b.HasOne("Kayord.Pos.Entities.StockOrderStatus", "StockOrderStatus")
                        .WithMany()
                        .HasForeignKey("StockOrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_stock_order_stock_order_status_stock_order_status_id");

                    b.HasOne("Kayord.Pos.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_stock_order_supplier_supplier_id");

                    b.Navigation("Division");

                    b.Navigation("StockOrderStatus");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Kayord.Pos.Entities.StockOrderItem", b =>
                {
                    b.HasOne("Kayord.Pos.Entities.Stock", "Stock")
                        .WithMany()
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_stock_order_item_stock_stock_id");

                    b.HasOne("Kayord.Pos.Entities.StockOrder", "StockOrder")
                        .WithMany("StockOrderItems")
                        .HasForeignKey("StockOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_stock_order_item_stock_order_stock_order_id");

                    b.HasOne("Kayord.Pos.Entities.StockOrderItemStatus", "StockOrderItemStatus")
                        .WithMany()
                        .HasForeignKey("StockOrderItemStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_stock_order_item_stock_order_item_status_stock_order_item_s");

                    b.Navigation("Stock");

                    b.Navigation("StockOrder");

                    b.Navigation("StockOrderItemStatus");
                });

            modelBuilder.Entity("Kayord.Pos.Entities.Table", b =>
                {
                    b.HasOne("Kayord.Pos.Entities.Section", "Section")
                        .WithMany("Tables")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_table_section_section_id");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("Kayord.Pos.Entities.TableBooking", b =>
                {
                    b.HasOne("Kayord.Pos.Entities.CashUpUser", "CashUpUser")
                        .WithMany()
                        .HasForeignKey("CashUpUserId")
                        .HasConstraintName("fk_table_booking_cash_up_user_cash_up_user_id");

                    b.HasOne("Kayord.Pos.Entities.SalesPeriod", "SalesPeriod")
                        .WithMany()
                        .HasForeignKey("SalesPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_table_booking_sales_period_sales_period_id");

                    b.HasOne("Kayord.Pos.Entities.Table", "Table")
                        .WithMany()
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_table_booking_table_table_id");

                    b.HasOne("Kayord.Pos.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_table_booking_user_user_id");

                    b.Navigation("CashUpUser");

                    b.Navigation("SalesPeriod");

                    b.Navigation("Table");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Kayord.Pos.Entities.Tag", b =>
                {
                    b.HasOne("Kayord.Pos.Entities.MenuItem", null)
                        .WithMany("Tags")
                        .HasForeignKey("MenuItemId")
                        .HasConstraintName("fk_tag_menu_item_menu_item_id");
                });

            modelBuilder.Entity("Kayord.Pos.Entities.UserOutlet", b =>
                {
                    b.HasOne("Kayord.Pos.Entities.Outlet", "Outlet")
                        .WithMany()
                        .HasForeignKey("OutletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_outlet_outlet_outlet_id");

                    b.Navigation("Outlet");
                });

            modelBuilder.Entity("Kayord.Pos.Entities.UserRoleOutlet", b =>
                {
                    b.HasOne("Kayord.Pos.Entities.Outlet", "Outlet")
                        .WithMany()
                        .HasForeignKey("OutletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_role_outlet_outlet_outlet_id");

                    b.HasOne("Kayord.Pos.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_role_outlet_role_role_id");

                    b.HasOne("Kayord.Pos.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_role_outlet_user_user_id");

                    b.Navigation("Outlet");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Kayord.Pos.Entities.Business", b =>
                {
                    b.Navigation("Outlets");
                });

            modelBuilder.Entity("Kayord.Pos.Entities.CashUpUser", b =>
                {
                    b.Navigation("CashUpUserItems");
                });

            modelBuilder.Entity("Kayord.Pos.Entities.Extra", b =>
                {
                    b.Navigation("OrderItemExtras");
                });

            modelBuilder.Entity("Kayord.Pos.Entities.ExtraGroup", b =>
                {
                    b.Navigation("Extras");

                    b.Navigation("MenuItemExtraGroups");
                });

            modelBuilder.Entity("Kayord.Pos.Entities.Menu", b =>
                {
                    b.Navigation("MenuSections");
                });

            modelBuilder.Entity("Kayord.Pos.Entities.MenuItem", b =>
                {
                    b.Navigation("MenuItemExtraGroups");

                    b.Navigation("MenuItemOptionGroups");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Kayord.Pos.Entities.MenuSection", b =>
                {
                    b.Navigation("MenuItems");

                    b.Navigation("SubMenuSections");
                });

            modelBuilder.Entity("Kayord.Pos.Entities.Option", b =>
                {
                    b.Navigation("OrderItemOptions");
                });

            modelBuilder.Entity("Kayord.Pos.Entities.OptionGroup", b =>
                {
                    b.Navigation("MenuItemOptionGroups");

                    b.Navigation("Options");
                });

            modelBuilder.Entity("Kayord.Pos.Entities.OrderGroup", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Kayord.Pos.Entities.OrderItem", b =>
                {
                    b.Navigation("OrderItemExtras");

                    b.Navigation("OrderItemOptions");
                });

            modelBuilder.Entity("Kayord.Pos.Entities.Outlet", b =>
                {
                    b.Navigation("OutletPaymentTypes");

                    b.Navigation("Sections");
                });

            modelBuilder.Entity("Kayord.Pos.Entities.PaymentType", b =>
                {
                    b.Navigation("OutletPaymentTypes");
                });

            modelBuilder.Entity("Kayord.Pos.Entities.Section", b =>
                {
                    b.Navigation("Tables");
                });

            modelBuilder.Entity("Kayord.Pos.Entities.Stock", b =>
                {
                    b.Navigation("StockItems");
                });

            modelBuilder.Entity("Kayord.Pos.Entities.StockAllocate", b =>
                {
                    b.Navigation("StockAllocateItems");
                });

            modelBuilder.Entity("Kayord.Pos.Entities.StockOrder", b =>
                {
                    b.Navigation("StockOrderItems");
                });

            modelBuilder.Entity("Kayord.Pos.Entities.Table", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("Kayord.Pos.Entities.TableBooking", b =>
                {
                    b.Navigation("Adjustments");

                    b.Navigation("OrderItems");

                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
